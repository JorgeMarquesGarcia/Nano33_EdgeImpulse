/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 08.03.2025 20:56:58

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1904;
#else
constexpr int kTensorArenaSize = 880;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,117 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data1[10] = { 0.034152347594499588, 0.05885770171880722, -0.020528528839349747, -0.062847882509231567, 0.03207695484161377, 0.11274310201406479, 0.050880633294582367, 0.012787053361535072, -0.036381013691425323, 0.021278876811265945, };
const TfArray<1, int> tensor_dimension1 = { 1, { 10 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data2[20] = { 0.090648964047431946, 0.053513955324888229, -0.020705923438072205, -0.023927073925733566, 0.095909044146537781, 0.0040067764930427074, 0.039515070617198944, -0.018043672665953636, -0.030458429828286171, -0.027241077274084091, -0.020217295736074448, -0.022659219801425934, -0.023653265088796616, -0.0069178002886474133, 0.064535394310951233, 0.0052039213478565216, 0.087115742266178131, 0.032982688397169113, -0.031727191060781479, 0.18169897794723511, };
const TfArray<1, int> tensor_dimension2 = { 1, { 20 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data3[7] = { 0.030991869047284126, 0.020385608077049255, 0.081471212208271027, -0.061925064772367477, -0.012722372077405453, -0.012702482752501965, -0.13797523081302643, };
const TfArray<1, int> tensor_dimension3 = { 1, { 7 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data4[20*117] = { 
  0.12137115001678467, 0.13653498888015747, 0.11740992218255997, 0.25217434763908386, 0.11794478446245193, 0.066110700368881226, -0.0011521115666255355, -0.1175062507390976, 0.057992588728666306, -0.20227614045143127, -0.037012550979852676, 0.18386012315750122, -0.23985293507575989, -0.15561704337596893, -0.16480296850204468, 0.43677103519439697, 0.091836445033550262, 0.084857769310474396, -0.21595335006713867, -0.23219330608844757, -0.22248660027980804, -0.11447536945343018, -0.11982699483633041, -0.095293737947940826, -0.17921163141727448, 0.34379306435585022, -0.042722143232822418, -0.30054476857185364, -0.2655998170375824, -0.12043596804141998, 0.019231287762522697, -0.0017082170816138387, 0.070252068340778351, -0.24695566296577454, -0.14433516561985016, -0.025691190734505653, -0.19473762810230255, 0.059882011264562607, -0.12043464928865433, -0.1604587584733963, -0.060788583010435104, -0.074830919504165649, 0.1021292433142662, -0.15961526334285736, -0.17817854881286621, 0.14744608104228973, 0.009727175347507, 0.26334431767463684, -0.10568809509277344, -0.12779037654399872, 0.060148067772388458, -0.17587807774543762, 0.067987747490406036, -0.62689727544784546, 0.21416822075843811, 0.13526861369609833, 0.03331325575709343, 0.27733266353607178, 0.31108629703521729, 0.20509345829486847, 0.11082833260297775, -0.068438850343227386, 0.020310951396822929, -0.050978753715753555, 0.081414677202701569, -0.25923377275466919, -0.011410556733608246, 0.24178463220596313, -0.011565631255507469, 0.018192650750279427, -0.062893740832805634, -0.14976370334625244, -0.00099767511710524559, 0.016767939552664757, -0.018874328583478928, -0.016198480501770973, 0.13984514772891998, 0.18818742036819458, 0.086653418838977814, 0.51687222719192505, -0.12285422533750534, 0.072283849120140076, 0.031461592763662338, 0.036674328148365021, -0.15270806849002838, -0.020592400804162025, -0.35525333881378174, -0.083831228315830231, -0.29678300023078918, -0.24201790988445282, -0.066493585705757141, 0.058069851249456406, 0.32173043489456177, -0.22316773235797882, 0.085041061043739319, -0.071830287575721741, 0.09243280440568924, -0.15952306985855103, -0.2540249228477478, -0.04280838742852211, -0.41721329092979431, -0.43302878737449646, 0.037698335945606232, 0.10781685262918472, -0.021270612254738808, -0.036202985793352127, -0.23197391629219055, 0.086999088525772095, -0.074953518807888031, -0.11314509063959122, 0.16187982261180878, 0.012634992599487305, 0.0005276924348436296, 0.071984872221946716, -0.07419026643037796, 0.11963352560997009, 0.020878801122307777, 
  -0.12799170613288879, 0.10162327438592911, 0.36300614476203918, 0.071990415453910828, -0.028571430593729019, 0.076245434582233429, 0.029466636478900909, 0.10311430692672729, 0.065558262169361115, 0.1829497367143631, -0.19739894568920135, 0.21761780977249146, -0.0053127105347812176, -0.014767463319003582, -0.045951776206493378, -0.034417908638715744, 0.14576272666454315, 0.00314489402808249, 0.23569642007350922, -0.15336474776268005, -0.29232862591743469, -0.069436028599739075, -0.12524008750915527, -0.14641785621643066, 0.095989540219306946, 0.32577106356620789, 0.0018124785274267197, -0.12911184132099152, -0.098044931888580322, -0.10791902244091034, -0.039533775299787521, 0.19918106496334076, 0.16171330213546753, 0.14492136240005493, 0.15498381853103638, -0.11975564807653427, -0.24065937101840973, -0.037673480808734894, -0.050684701651334763, -0.10630938410758972, 0.2467578649520874, -0.13566090166568756, 0.36864805221557617, 0.1973157674074173, 0.13343070447444916, -0.066180653870105743, 0.22303824126720428, -0.071730002760887146, 0.041091211140155792, 0.041170109063386917, -0.10095083713531494, -0.031264748424291611, 0.062505416572093964, -0.4353145956993103, 0.1506761908531189, -0.20094351470470428, -0.31834334135055542, 0.29506373405456543, 0.28370234370231628, -0.077684879302978516, -0.01093277707695961, 0.18243062496185303, -0.054063752293586731, 0.073286116123199463, 0.082063272595405579, -0.0013737590052187443, 0.28990533947944641, -0.041418895125389099, -0.024085156619548798, -0.016070600599050522, 0.12225450575351715, -0.037453997880220413, 0.25743091106414795, 0.057080358266830444, 0.065369680523872375, 0.22931310534477234, -0.067462004721164703, -0.028641717508435249, 0.075216881930828094, 0.57039618492126465, -0.13596151769161224, -0.16843333840370178, -0.085265636444091797, 0.092104040086269379, 0.099458567798137665, 0.11957191675901413, -0.060982760041952133, -0.048801951110363007, -0.0021497271955013275, 0.074935689568519592, 0.06705077737569809, 0.19807979464530945, 0.21889206767082214, 0.038023538887500763, 0.061028297990560532, 0.14963209629058838, 0.049262478947639465, -0.10252521187067032, 0.25546899437904358, 0.033681754022836685, 0.21056345105171204, 0.223824143409729, 0.36441674828529358, 0.29145807027816772, -0.1334240734577179, 0.072441831231117249, 0.059169609099626541, -0.11065118014812469, -0.053713459521532059, -0.0300009585916996, -0.067027546465396881, -0.17661291360855103, 0.18974635004997253, 0.043940473347902298, -0.064246907830238342, 0.15148454904556274, 0.13620425760746002, 
  0.10263815522193909, -0.2782147228717804, 0.18568877875804901, -0.18133431673049927, 0.031667720526456833, -0.095666863024234772, 0.13210932910442352, 0.23169644176959991, 0.22577722370624542, 0.022438084706664085, -0.16828142106533051, 0.038856849074363708, -0.082351088523864746, 0.089356303215026855, -0.072824761271476746, 0.15054498612880707, -0.040347833186388016, -0.064764775335788727, 0.10657480359077454, 0.22640816867351532, 0.36238777637481689, -0.13761703670024872, 0.10094930976629257, -0.093564495444297791, 0.042157620191574097, -0.09733235090970993, 0.19304729998111725, -0.053810004144906998, -0.095716163516044617, -0.13042569160461426, -0.043061565607786179, 0.191961869597435, 0.17885370552539825, -0.13516165316104889, -0.0069631906226277351, -0.046250589191913605, -0.2149408757686615, 0.021651323884725571, 0.09753052145242691, -0.1547190248966217, 0.20416700839996338, 0.2163323312997818, -0.23169459402561188, -0.034265473484992981, 0.06039104238152504, -0.022300044074654579, -0.12136214971542358, -0.1892690509557724, 0.096382610499858856, -0.035354651510715485, 0.095430023968219757, -0.05192314088344574, -0.030728241428732872, 0.053678330034017563, 0.10063716024160385, -0.15634022653102875, 0.037171889096498489, 0.021000739187002182, 0.0057197781279683113, -0.10102859139442444, 0.14624449610710144, -0.095864534378051758, -0.082707300782203674, 0.0041191857308149338, -0.072438701987266541, 0.095298647880554199, 0.83981037139892578, 0.011582196690142155, -0.10311505943536758, -0.13754729926586151, -0.026939086616039276, -0.194241002202034, -0.015423925593495369, 0.14301326870918274, -0.054489988833665848, -0.21292522549629211, -0.19368557631969452, 0.085248202085494995, -0.16736912727355957, -0.14112786948680878, 0.043942566961050034, -0.16081584990024567, -0.012914839200675488, 0.020942958071827888, -0.019304638728499413, 0.13214962184429169, -0.095458626747131348, 0.12923629581928253, -0.30230769515037537, 0.17157952487468719, -0.20618568360805511, 0.1111488938331604, 0.16900917887687683, 0.10977388173341751, 0.15115675330162048, 0.045872032642364502, 0.15209655463695526, 0.11242195963859558, 0.23887930810451508, 0.067594766616821289, -0.0015398196410387754, -0.16804952919483185, 0.11258085072040558, -0.13522188365459442, 0.077763117849826813, -0.16097812354564667, 0.24144852161407471, 0.097863160073757172, -0.073977462947368622, -0.046806816011667252, -0.13768692314624786, 0.11809200048446655, 0.13697066903114319, -0.14250613749027252, -0.26641380786895752, -0.16063778102397919, 0.20175182819366455, 
  -0.079804375767707825, 0.19765554368495941, -0.13379095494747162, 0.096355430781841278, -0.047465007752180099, 0.27080452442169189, 0.12833100557327271, 0.28636378049850464, 0.15198564529418945, -0.094300374388694763, 0.25994914770126343, 0.23293484747409821, 0.11289753019809723, 0.090904787182807922, -0.059256333857774734, -0.040355153381824493, -0.22294244170188904, -0.28503978252410889, 0.039270374923944473, 0.095221675932407379, -0.17750515043735504, 0.06431608647108078, -0.18474060297012329, -0.10316895693540573, 0.10902551561594009, 0.10462233424186707, -0.1705145388841629, 0.11654233932495117, 0.13781015574932098, 0.082911238074302673, -0.20125110447406769, 0.06637505441904068, 0.14879238605499268, -0.11022897809743881, 0.13403677940368652, 0.042274121195077896, 0.25101354718208313, -0.18086522817611694, 0.0169028639793396, 0.10087914764881134, 0.14641354978084564, 0.068530380725860596, -0.01234720554202795, 0.15597938001155853, 0.17100173234939575, -0.19179940223693848, -0.036226812750101089, -0.17209641635417938, 0.090647749602794647, 0.063261918723583221, -0.15916454792022705, -0.02527090348303318, -0.051975160837173462, -0.41629356145858765, 0.080563545227050781, -0.14735260605812073, -0.21082411706447601, -0.22520947456359863, -0.10388055443763733, -0.047847941517829895, 0.17262256145477295, 0.045266468077898026, 0.17519453167915344, 0.1311870664358139, -0.15132644772529602, -0.1881185919046402, 0.1657225489616394, -0.2222038060426712, -0.092420853674411774, -0.075838416814804077, 0.10526823252439499, -0.1450323760509491, -0.16982601583003998, -0.18533036112785339, 0.023589532822370529, 0.052828174084424973, -0.083371601998806, 0.20981080830097198, 0.071140378713607788, 0.19065201282501221, 0.03651205450296402, 0.10821454226970673, 0.11736238747835159, -0.075526311993598938, -0.047745946794748306, -0.17567338049411774, 0.037509601563215256, -0.086546964943408966, 0.12373355031013489, -0.082326292991638184, 0.19726604223251343, 0.047597181051969528, -0.21410098671913147, -0.073121681809425354, 0.14760951697826385, -0.10993180423974991, -0.14595796167850494, -0.090136125683784485, 0.12225849181413651, -0.080407492816448212, -0.10615001618862152, -0.077621065080165863, 0.12888634204864502, -0.14566394686698914, -0.11988399177789688, -0.035680375993251801, -0.029956728219985962, -0.072426766157150269, 0.043949339538812637, 0.037275619804859161, -0.21408487856388092, 0.0074916151352226734, -0.028237925842404366, 0.12773284316062927, -0.041321724653244019, 0.15363635122776031, -0.19378133118152618, 
  0.135228231549263, 0.10688840597867966, 0.11444865167140961, -0.045596949756145477, -0.16621561348438263, -0.19697515666484833, 0.11612110584974289, -0.11090431362390518, -0.17744018137454987, 0.0573379285633564, -0.14469021558761597, -0.019534697756171227, -0.21532517671585083, -0.12307325005531311, -0.39692267775535583, 0.096392229199409485, 0.16533228754997253, 0.041065901517868042, -0.089569158852100372, -0.12390357255935669, -0.099758639931678772, 0.10710539668798447, -0.16019511222839355, -0.15440402925014496, -0.16491356492042542, -0.064870648086071014, 0.12210872769355774, 0.19037646055221558, -0.1485024094581604, -0.13986556231975555, 0.034117989242076874, -0.20106913149356842, 0.11043483763933182, -0.22503854334354401, -0.14826682209968567, -0.18695679306983948, -0.12797354161739349, -0.2696584165096283, -0.035156622529029846, 0.044617891311645508, 0.4779948890209198, 0.10881808400154114, -0.10389778017997742, -0.10685999691486359, 0.085298553109169006, -0.17673245072364807, 0.12570774555206299, 0.087388046085834503, -0.0564398393034935, 0.11097707599401474, 0.086661204695701599, 0.12049799412488937, -0.176211878657341, -0.29755142331123352, 0.0043160095810890198, 0.21962444484233856, -0.0078867608681321144, 0.13640923798084259, 0.21007277071475983, 0.14332050085067749, -0.2150852382183075, -0.19668789207935333, 0.18068403005599976, 0.18381701409816742, -0.019498543813824654, -0.01425264123827219, -0.17066213488578796, 0.2110690176486969, -0.25374788045883179, -0.18953275680541992, -0.20792482793331146, 0.031241660937666893, 0.087359420955181122, 0.052548985928297043, 0.10676905512809753, 0.056906502693891525, -0.10856968909502029, -0.012757366523146629, -0.12893182039260864, -0.19316098093986511, 0.063442572951316833, -0.10786508023738861, 0.17702901363372803, -0.19222772121429443, 0.013016514480113983, -0.17448633909225464, -0.043184794485569, -0.20335303246974945, 0.076692536473274231, -0.13355967402458191, -0.12590931355953217, 0.00065820908639580011, -0.062667630612850189, -0.066429860889911652, 0.16259585320949554, 0.11116335541009903, -0.0063124294392764568, -0.1306137889623642, -0.2087123841047287, -0.23340113461017609, -0.11746122688055038, -0.26627880334854126, -0.032057158648967743, -0.11925169825553894, 0.1616535484790802, -0.1516718715429306, -0.20281058549880981, 0.057453673332929611, -0.063391789793968201, 0.037538211792707443, -0.1788783073425293, -0.050460852682590485, -0.15479990839958191, -0.045486584305763245, 0.031474828720092773, -0.068267524242401123, -0.098035730421543121, 
  -0.03520612046122551, 0.21943289041519165, 0.14726760983467102, -0.033178441226482391, -0.10685189068317413, -0.1977851539850235, -0.017613871023058891, 0.19040866196155548, -0.056630223989486694, -0.012118031270802021, -0.20072214305400848, -0.054047472774982452, -0.23644460737705231, 0.010331066325306892, -4.0069811802823097e-05, 0.042733486741781235, -0.27146455645561218, -0.095044508576393127, -0.087310619652271271, -0.031011190265417099, -0.51292496919631958, -0.16580519080162048, -0.24554607272148132, -0.21144174039363861, 0.2065945565700531, 0.13632847368717194, 0.042853657156229019, -0.24141988158226013, -0.15132881700992584, 0.17172645032405853, -0.076766476035118103, -0.061655253171920776, 0.13680294156074524, -0.16466064751148224, 0.090293906629085541, -0.2592109739780426, 0.12710848450660706, -0.15417660772800446, 0.042725469917058945, 0.14358901977539062, -0.0099359583109617233, -0.0012275988701730967, -0.0049136262387037277, -0.062421370297670364, -0.023107917979359627, -0.27903217077255249, -0.15671786665916443, -0.13621538877487183, -0.050473380833864212, 0.093083322048187256, 0.19346253573894501, -0.11835065484046936, 0.055855873972177505, -0.27458015084266663, 0.11526689678430557, 0.067996703088283539, -0.025591317564249039, -0.0066311294212937355, 0.11627525836229324, -0.0039307172410190105, 0.0048603126779198647, -0.23157644271850586, 0.084680989384651184, -0.15426017343997955, -0.017127372324466705, -0.10883915424346924, -0.16869354248046875, 0.20611982047557831, -0.014810798689723015, 0.19364562630653381, 0.044367406517267227, -0.13515757024288177, 0.17197902500629425, -0.15596698224544525, -0.24964731931686401, -0.14194051921367645, -0.081455431878566742, -0.037128947675228119, 0.14953765273094177, 0.25441831350326538, -0.2339775413274765, 0.057219315320253372, -0.13635680079460144, 0.1222255751490593, -0.095434889197349548, -0.21471358835697174, -0.04472670704126358, -0.081831008195877075, 0.10864526033401489, -0.094326823949813843, -0.046740986406803131, 0.085555225610733032, -0.034149549901485443, 0.10138443112373352, -0.010156841948628426, -0.063450872898101807, -0.064291633665561676, 0.011110668070614338, -0.046448197215795517, 0.19637386500835419, -0.11326656490564346, -0.041272684931755066, 0.26865267753601074, 0.044505171477794647, 0.0002821698144543916, 0.10575428605079651, 0.15075711905956268, -0.16525667905807495, 0.035631276667118073, 0.069126255810260773, -0.04459775984287262, -0.066883079707622528, 0.041042890399694443, 0.065070241689682007, 0.16512356698513031, -0.01702345535159111, 0.17852698266506195, 
  0.042711053043603897, -0.12181089818477631, -0.072454802691936493, -0.087562888860702515, -0.14756198227405548, -0.25737041234970093, -0.12324672192335129, 0.088104546070098877, -0.10698408633470535, -0.028174299746751785, -0.044051330536603928, -0.060660898685455322, -0.051566235721111298, 0.12944041192531586, 0.29673629999160767, 0.00060080527327954769, -0.083248838782310486, -0.17079506814479828, 0.14539691805839539, 0.081233993172645569, -0.1965864896774292, 0.0047997119836509228, -0.14403466880321503, 0.11374997347593307, -0.096842363476753235, -0.0281688142567873, 0.18831780552864075, -0.086543120443820953, 0.18486219644546509, 0.014608215540647507, 0.12243008613586426, -0.23228439688682556, -0.050330806523561478, -0.034316066652536392, -0.19321250915527344, 0.08993193507194519, -0.22238320112228394, 0.05003630742430687, -0.19131875038146973, 0.19148562848567963, -0.4692898690700531, 0.082913413643836975, -0.012966633774340153, -0.069573111832141876, -0.1154305562376976, -0.16932380199432373, 0.18168506026268005, -0.13220213353633881, -0.055817972868680954, -0.075626067817211151, -0.15758632123470306, 0.14519426226615906, -0.20203946530818939, 0.32593637704849243, 0.071673445403575897, -0.026954464614391327, -0.011428851634263992, 0.15191005170345306, 0.073673151433467865, -0.095806092023849487, -0.11262692511081696, 0.021678615361452103, 0.12120948731899261, -0.14991936087608337, 0.088608682155609131, 0.072672687470912933, -0.3466656506061554, 0.026811601594090462, -0.049781650304794312, -0.030832678079605103, 0.014654220081865788, 0.12933653593063354, -0.054458357393741608, 0.089367508888244629, 0.028162457048892975, 0.1155637726187706, 0.11490486562252045, 0.11591742932796478, 0.034961730241775513, -0.13101671636104584, 0.22590534389019012, 0.16757051646709442, 0.046673975884914398, 0.0016266111051663756, -0.16851112246513367, -0.12935589253902435, 0.083198696374893188, -0.014514881186187267, -0.12558592855930328, -0.16316491365432739, -0.19829216599464417, 0.15104033052921295, 0.023262752220034599, 0.20573046803474426, -0.033564187586307526, -0.18275731801986694, -0.17262996733188629, -0.15520615875720978, -0.25588393211364746, -0.038598872721195221, -0.20020702481269836, -0.13707084953784943, -0.07704431563615799, -0.10861247777938843, 0.17624044418334961, 0.077379696071147919, 0.040496386587619781, -0.076849989593029022, -0.049149423837661743, -0.035743940621614456, -0.033292848616838455, 0.058877084404230118, 0.095510654151439667, -0.25086092948913574, 0.04025709256529808, -0.073170192539691925, 0.051397871226072311, 
  0.13556332886219025, -0.18596303462982178, 0.044611375778913498, 0.15720348060131073, 0.16231933236122131, 0.075128763914108276, 0.072346985340118408, 0.10126445442438126, -0.049076184630393982, 0.19086247682571411, -0.027798321098089218, 0.21645957231521606, -0.055781044065952301, 0.064521670341491699, -0.14141370356082916, -0.20358854532241821, -0.083174236118793488, -0.10487069934606552, -0.1222328394651413, 0.20937173068523407, 0.18780016899108887, -0.11721114814281464, -0.093303315341472626, 0.013188811019062996, -0.029642196372151375, 0.21504436433315277, -0.076318800449371338, 0.052494324743747711, -0.19743633270263672, -0.04423116147518158, 0.043366175144910812, 0.2082718163728714, 0.060282614082098007, -0.16469359397888184, -0.05828629806637764, -0.17618852853775024, -0.019458804279565811, 0.073066800832748413, 0.15742620825767517, -0.089896328747272491, -0.019400190562009811, 0.036575455218553543, 0.19223497807979584, 0.18812336027622223, 0.054749716073274612, -0.036657355725765228, 0.026885839179158211, -0.19488087296485901, -0.14232930541038513, 0.083372071385383606, -0.15902388095855713, -0.074652902781963348, -0.056251216679811478, 0.040269080549478531, -0.069452382624149323, -0.14340166747570038, -0.16892950236797333, 0.12736140191555023, 0.1206638440489769, -0.21740294992923737, -0.15091119706630707, -0.073247045278549194, 0.092637769877910614, -0.16448639333248138, 0.093731991946697235, 0.039244290441274643, 0.035039719194173813, -0.083155125379562378, -0.11280716955661774, 0.19333209097385406, -0.13979019224643707, 0.01904517225921154, -0.054758992046117783, 0.068867169320583344, -0.020120987668633461, 0.020414048805832863, -0.092720687389373779, 0.097749173641204834, -0.12699629366397858, 0.10152561962604523, 0.19886419177055359, -0.22474426031112671, 0.10436785966157913, 0.0037386869080364704, 0.067611522972583771, -0.17961573600769043, 0.10339550673961639, 0.10818703472614288, 0.15654341876506805, -0.054932955652475357, -0.034926306456327438, -0.19208870828151703, 0.02147173136472702, -0.11066161841154099, -0.18612794578075409, -0.095090143382549286, -0.051429737359285355, -0.161338210105896, 0.026935607194900513, 0.20707915723323822, -0.0490688756108284, 0.13910886645317078, 0.0080526787787675858, -0.16690842807292938, -0.044568248093128204, -0.072523884475231171, -0.10186604410409927, -0.19217739999294281, 0.18929789960384369, -0.067348688840866089, -0.10676897317171097, -0.15359139442443848, 0.050620060414075851, 0.10968516021966934, 0.18811015784740448, -0.070055738091468811, 0.16819238662719727, 
  0.075645484030246735, 0.25667232275009155, 0.23613725602626801, -0.071201905608177185, -0.21861997246742249, 0.097816988825798035, -0.048179153352975845, -0.15075436234474182, -0.039170995354652405, -0.054451171308755875, -0.010926368646323681, 0.10805340111255646, 0.040933258831501007, -0.093401096761226654, -0.1809653639793396, -0.13131529092788696, 0.010503486730158329, -0.22868908941745758, 0.20416076481342316, 0.13757741451263428, 0.062026698142290115, 0.08166157454252243, 0.12491296231746674, 0.075927309691905975, 0.16116946935653687, 0.12545762956142426, 0.11440719664096832, -0.13878521323204041, 0.20901021361351013, -0.21651877462863922, 0.075722910463809967, -0.23531241714954376, -0.062130335718393326, -0.045247040688991547, -0.2074202299118042, -0.097625091671943665, -0.2316906750202179, 0.13290005922317505, -0.16733764111995697, 0.021315913647413254, 0.031514063477516174, -0.087410993874073029, -0.22613701224327087, -0.054328110069036484, -0.21468870341777802, 0.038233678787946701, -0.10057620704174042, -0.071463346481323242, -0.12225712090730667, 0.052130952477455139, -0.22924517095088959, -0.24288173019886017, 0.18246448040008545, -0.11068741977214813, 0.14660632610321045, 0.058475274592638016, -0.021855784580111504, 0.070972144603729248, -0.042926091700792313, -0.10487379133701324, 0.10531856864690781, -0.073494456708431244, 0.15997752547264099, -0.11190323531627655, -0.01343927625566721, -0.17365466058254242, -0.037782706320285797, 0.13101685047149658, 0.1002022847533226, -0.10427089780569077, -0.11840065568685532, -0.075794011354446411, 0.022364722564816475, -0.20677387714385986, -0.11765380948781967, -0.21810990571975708, -0.20071108639240265, -0.14410929381847382, -0.14939714968204498, 0.23034484684467316, 0.0022169670555740595, -0.14946238696575165, -0.1912112832069397, -0.12757132947444916, 0.14290031790733337, 0.014347190968692303, -0.039203967899084091, 0.045700497925281525, 0.090109698474407196, 0.081182494759559631, -0.033270489424467087, -0.16180413961410522, 0.033482607454061508, -0.041122972965240479, 0.10759531706571579, -0.096084289252758026, 0.17946763336658478, 0.064373582601547241, 0.13847489655017853, -0.053887981921434402, -0.17636702954769135, -0.019156776368618011, 0.024542130529880524, 0.29458272457122803, -0.021142348647117615, 0.29349473118782043, 0.016200106590986252, -0.010583854280412197, 0.016070535406470299, -0.057140704244375229, -0.12903964519500732, 0.092764526605606079, -0.0042756278999149799, 0.048752378672361374, 0.12305161356925964, 0.14119920134544373, 0.032427668571472168, 
  -0.19891095161437988, 0.090131349861621857, -0.17357850074768066, -0.039117470383644104, -0.13265030086040497, 0.15104919672012329, -0.16227413713932037, 0.027140690013766289, -0.085739538073539734, -0.18139278888702393, -0.14989373087882996, -0.11497224122285843, -0.18148814141750336, -0.0812954381108284, -0.11835771799087524, 0.14401455223560333, -0.047169949859380722, 0.1074371337890625, 0.17290100455284119, -0.10620332509279251, -0.016652621328830719, 0.15741446614265442, 0.067001372575759888, 0.22004890441894531, 0.23479883372783661, 0.16552126407623291, -0.018066376447677612, 0.069461144506931305, -0.027773892506957054, 0.065544694662094116, -0.082839950919151306, -0.032567244023084641, -0.12550492584705353, 0.019900953397154808, 0.17203378677368164, 0.089822210371494293, 0.16610312461853027, 0.18271650373935699, -0.0055944896303117275, 0.00034565923851914704, 0.066609852015972137, 0.050481852144002914, -0.13490930199623108, 0.066472277045249939, -0.12013925611972809, -0.23849135637283325, 0.10147029906511307, 0.053671624511480331, 0.14643178880214691, -0.19453459978103638, 0.072887316346168518, 0.16255143284797668, -0.22692069411277771, -0.20159292221069336, -0.1424904465675354, 0.010967238806188107, 0.12394450604915619, -0.0032887998968362808, -0.21685570478439331, 0.037636741995811462, -0.20589423179626465, -0.13623520731925964, -0.17063136398792267, 0.12889634072780609, -0.027436073869466782, -0.075883820652961731, -0.21731956303119659, -0.078016556799411774, -0.17003470659255981, 0.07239503413438797, -0.15519894659519196, 0.11275690793991089, 0.15248255431652069, -0.023294167593121529, -0.064424231648445129, -0.18656913936138153, 0.16375511884689331, -0.08730778843164444, -0.23198522627353668, 0.13046707212924957, 0.12106221914291382, 0.17460106313228607, -0.19738568365573883, -0.086401849985122681, -0.11890289187431335, 0.18588133156299591, -0.11578194797039032, -0.083878248929977417, 0.12649218738079071, 0.064314857125282288, 0.19067108631134033, 0.053280320018529892, -0.072289556264877319, -0.013159802183508873, -0.0040562320500612259, 0.16151601076126099, 0.022252026945352554, -0.1649329662322998, -0.13217370212078094, -0.064919561147689819, 0.15544338524341583, -0.13294245302677155, -0.15230634808540344, -0.047570116817951202, 0.0022479954641312361, -0.023219726979732513, -0.21498234570026398, -0.12289034575223923, 0.063050642609596252, 0.087288655340671539, 0.12340528517961502, -0.085638768970966339, -0.056106764823198318, -0.066049762070178986, 0.20162205398082733, 0.16171562671661377, 0.1786399632692337, 
  0.25167545676231384, 0.12162043899297714, 0.12952540814876556, -0.1983470618724823, -0.12467457354068756, -0.050966106355190277, 0.1085498183965683, 0.063928782939910889, 0.062078442424535751, 0.1001095175743103, -0.10311738401651382, 0.16995795071125031, 0.052434656769037247, -0.15006925165653229, 0.29936832189559937, -0.037210270762443542, -0.056850135326385498, -0.092168554663658142, 0.099952302873134613, -0.019535612314939499, -0.47621321678161621, 0.15134291350841522, -0.32980167865753174, 0.19086652994155884, 0.32718884944915771, 0.21404626965522766, -0.034956689924001694, -0.23751100897789001, 0.058920115232467651, 0.13424031436443329, -0.14575903117656708, -0.10751929134130478, -0.10851281881332397, 0.058254808187484741, 0.35320571064949036, 0.22316806018352509, 0.039120957255363464, -0.097993247210979462, -0.095909327268600464, 0.12049400061368942, -0.34177383780479431, -0.010567151010036469, 0.10781198740005493, -0.10058748722076416, -0.063215397298336029, 0.13740137219429016, 0.071570374071598053, -0.14082382619380951, 0.12024423480033875, 0.091900341212749481, 0.011459091678261757, -0.14280427992343903, 0.010048585012555122, -0.042966976761817932, 0.15043631196022034, 0.14003351330757141, -0.16561459004878998, -0.024155674502253532, 0.069469325244426727, -0.012347438372671604, 0.061773888766765594, 0.087920904159545898, 0.11689484864473343, 0.2045503556728363, 0.12206628173589706, -0.19613932073116302, -0.40596365928649902, 0.12189415842294693, -0.058211814612150192, 0.19241990149021149, 0.0588810034096241, 0.018773419782519341, 0.052868124097585678, -0.057694133371114731, -0.028131566941738129, 0.1959778368473053, 0.028776444494724274, -0.12508274614810944, 0.14598484337329865, 0.39142662286758423, -0.12882937490940094, -0.15240265429019928, 0.065551780164241791, -0.12590955197811127, -0.09475843608379364, 0.12525762617588043, -0.11139935255050659, 0.022403616458177567, -0.088704191148281097, -0.14049665629863739, -0.058407135307788849, 0.32312020659446716, 0.21923047304153442, -0.077519670128822327, -0.037504743784666061, 0.012131758034229279, -0.088656090199947357, 0.13476411998271942, -0.15645414590835571, 0.26706695556640625, 0.1491689532995224, 0.21049511432647705, 0.193147212266922, 0.29035383462905884, 0.13407307863235474, 0.031519860029220581, 0.020744457840919495, -0.18956963717937469, 0.16624192893505096, 0.069605298340320587, 0.015990369021892548, 0.049272153526544571, 0.13774967193603516, 0.13887016475200653, -0.078214958310127258, 0.081757619976997375, 0.080651216208934784, 
  -0.057913277298212051, -0.027235107496380806, 0.31299117207527161, -0.10006503760814667, -0.20923678576946259, -0.22701092064380646, 0.19221438467502594, -0.12531717121601105, 0.17171412706375122, -0.15357878804206848, 0.19428533315658569, 0.13320498168468475, 0.11313244700431824, 0.12865249812602997, -0.15388038754463196, -0.047115880995988846, -0.18038816750049591, -0.25078931450843811, 0.1907803863286972, 0.082794681191444397, -0.31987413763999939, 0.054535631090402603, 0.14834623038768768, -0.011053530499339104, 0.22040823101997375, 0.45385995507240295, 0.11319391429424286, -0.18036997318267822, 0.25489982962608337, 0.069161891937255859, -0.042695436626672745, -0.051786325871944427, -0.027725262567400932, -0.10508839040994644, 0.071641057729721069, -0.066468261182308197, -0.2081739753484726, 0.065728954970836639, -0.025253094732761383, 0.12380031496286392, 0.094360031187534332, -0.13039718568325043, 0.087926194071769714, -0.069126635789871216, -0.14806923270225525, -0.091525159776210785, 0.059963550418615341, 0.1195986345410347, -0.16212214529514313, -0.016059275716543198, -0.13333998620510101, 0.11009656637907028, 0.051019091159105301, 0.68694412708282471, 0.15859526395797729, 0.081383273005485535, 0.040169913321733475, -0.028229909017682076, 0.012805297039449215, -0.18525472283363342, 0.10847288370132446, 0.10630156844854355, -0.024468665942549706, -0.067633554339408875, 0.16972161829471588, 0.10322964936494827, 0.19554390013217926, 0.042517051100730896, -0.19839952886104584, -0.058299142867326736, -0.24146406352519989, -0.0026241501327604055, -0.10826128721237183, -0.084581300616264343, 0.18661092221736908, 0.087831318378448486, 0.10858011990785599, 0.15656216442584991, 0.062356434762477875, 0.21844883263111115, -0.017641985788941383, 0.15086798369884491, -0.22195154428482056, -0.13469460606575012, -0.24100704491138458, -0.22497519850730896, -0.20206746459007263, 0.04839494451880455, -0.077721565961837769, 0.10114489495754242, 0.082504481077194214, -0.16052456200122833, -0.2120899111032486, -0.14195668697357178, -0.0053861481137573719, -0.023194616660475731, 0.060175944119691849, 0.062200259417295456, 0.025177741423249245, 0.019455369561910629, 0.094651989638805389, -0.19455242156982422, 0.2850472629070282, 0.29526561498641968, 0.075676590204238892, 0.2686212956905365, 0.047413531690835953, 0.16625110805034637, -0.046122588217258453, -0.21168847382068634, -0.095654256641864777, 0.013996264897286892, 0.031108671799302101, 0.026132997125387192, -0.23729677498340607, -0.17721563577651978, -0.18856619298458099, 
  -0.12003203481435776, -0.19921454787254333, -0.0048579392023384571, -0.087271936237812042, 0.10975931584835052, -0.17383448779582977, -0.10792994499206543, -0.18541646003723145, -0.15065185725688934, 0.11933842301368713, -0.025702705606818199, -0.17369377613067627, 0.07092604786157608, 0.085990920662879944, -0.06316954642534256, 0.1280493438243866, 0.0015018807025626302, -0.087401211261749268, 0.17008857429027557, -0.047206882387399673, 0.10153829306364059, 0.12776941061019897, -0.11990797519683838, 0.1327904611825943, 0.11320275813341141, -0.057490561157464981, -0.0074492818675935268, -0.092217713594436646, 0.17246876657009125, -0.065954633057117462, -0.092385545372962952, 0.046562917530536652, -0.17904646694660187, 0.18900382518768311, 0.14879265427589417, 0.13382390141487122, 0.18715673685073853, -0.12843069434165955, -0.1518840491771698, -0.15034778416156769, -0.11165129393339157, 0.079564519226551056, -0.18773648142814636, -0.11198039352893829, -0.22585207223892212, -0.10140581429004669, 0.16996079683303833, 0.097516283392906189, -0.050619214773178101, 0.18936078250408173, 0.12003566324710846, -0.20100602507591248, -0.23079173266887665, 0.037694856524467468, -0.15601897239685059, -0.22743223607540131, -0.14337784051895142, 0.037978727370500565, -0.062713079154491425, 0.064824111759662628, -0.091408148407936096, -0.17234086990356445, -0.1823602169752121, 0.11349833756685257, 0.011259120889008045, 0.027414377778768539, 0.11543137580156326, -0.033157672733068466, 0.0011994478991255164, 0.12937590479850769, -0.02736193872988224, -0.12375510483980179, 0.068508319556713104, 0.10737593472003937, 0.029750538989901543, -0.22932709753513336, -0.10674604028463364, 0.13437910377979279, -0.20159003138542175, -0.19602732360363007, 0.050932962447404861, 0.064700901508331299, 0.15020512044429779, 0.10864628851413727, 0.17201858758926392, 0.13746044039726257, -0.20561125874519348, -0.13475795090198517, -0.0034399973228573799, 0.1115514412522316, -0.1607016921043396, 0.1635386049747467, 0.025428555905818939, 0.060362059623003006, -0.16481178998947144, -0.20738877356052399, 0.050698921084403992, -0.0019263883586972952, 0.11315068602561951, -0.067701123654842377, -0.16233569383621216, 0.1047985777258873, 0.080225951969623566, 0.050714265555143356, -0.027486084029078484, -0.11298161745071411, 0.063798598945140839, 0.13970965147018433, 0.076441287994384766, 0.014557774178683758, 0.017719753086566925, -0.087054222822189331, 0.010765189304947853, -0.11754037439823151, -0.11516845971345901, 0.021284660324454308, -0.07428065687417984, 
  -0.00092497392324730754, 0.032049976289272308, -0.16666994988918304, -0.012276074849069118, 0.20588359236717224, 0.10078883916139603, -0.23625294864177704, 0.10098675638437271, 0.022251255810260773, 0.029837585985660553, 0.071710214018821716, 0.059357751160860062, 0.089796639978885651, -0.017237270250916481, 0.24430710077285767, -0.017719993367791176, -0.28832539916038513, -0.20580956339836121, -0.37592166662216187, -0.43721494078636169, -0.52643638849258423, -0.09291541576385498, 0.021415116265416145, 0.067723169922828674, 0.10522650927305222, 0.046384595334529877, -0.072672545909881592, 0.32065778970718384, -0.21579891443252563, -0.077985063195228577, 0.06838545948266983, -0.15679743885993958, -0.2364831417798996, 0.049500402063131332, 0.044924713671207428, 0.17441889643669128, 0.33797025680541992, 0.11991634219884872, 0.30863425135612488, 0.0048265079967677593, -0.044348917901515961, 0.11659281700849533, 0.067602075636386871, -0.43908411264419556, 0.19729554653167725, -0.076174899935722351, -0.005873942282050848, 0.097828730940818787, 0.21092994511127472, 0.11740712076425552, 0.097253628075122833, 0.13475146889686584, -0.22132673859596252, -0.38755935430526733, 0.19169628620147705, -0.21858717501163483, -0.096427597105503082, 0.062909066677093506, 0.02516564354300499, -0.026468170806765556, 0.057776197791099548, -0.032659109681844711, -0.0032297605648636818, -0.14775291085243225, 0.12561379373073578, 0.22544755041599274, -0.61181747913360596, 0.093863360583782196, 0.044557105749845505, 0.18932262063026428, -0.17691099643707275, -0.096012130379676819, 0.12647801637649536, -0.0182681605219841, 0.1176491379737854, -0.15247291326522827, -0.10503321886062622, -0.10755649954080582, 0.050546906888484955, -0.0709681436419487, -0.035858403891324997, 0.10597836226224899, -0.018438797444105148, -0.19055657088756561, 0.069448612630367279, -0.17039081454277039, 0.16928730905056, -0.062422711402177811, 0.05335523933172226, -0.50140976905822754, 0.062920704483985901, 0.12328378111124039, -0.022685570642352104, -0.17685690522193909, -0.18923299014568329, -0.12174446135759354, -0.20413410663604736, 0.16571925580501556, -0.13315938413143158, -0.068159535527229309, -0.12575504183769226, 0.19943232834339142, -0.1460970938205719, -0.22353096306324005, -0.074097022414207458, 0.60626101493835449, 0.011148648336529732, 0.044049039483070374, 0.072641201317310333, 0.17039400339126587, 0.15817463397979736, -0.17183409631252289, -0.10338424891233444, 0.11746162921190262, -0.049419574439525604, 0.21150927245616913, 0.07963234931230545, 
  0.24380375444889069, -0.16853664815425873, -0.25365510582923889, 0.11351402103900909, 0.10188271105289459, -0.079413004219532013, -0.036126401275396347, 0.069237582385540009, 0.17053154110908508, 0.12366757541894913, 0.26578441262245178, -0.24366767704486847, -0.15761594474315643, 0.29709744453430176, 0.010408950969576836, -0.03906434029340744, -0.080895818769931793, 0.16215626895427704, 0.15256725251674652, -0.28234687447547913, 0.14548391103744507, 0.10407595336437225, -0.0023019707296043634, 0.14564833045005798, -0.25140643119812012, -0.36123692989349365, 0.059600919485092163, 0.0072788707911968231, 0.14841489493846893, 0.0043650930747389793, 0.32035893201828003, -0.0060426588170230389, -0.014417440630495548, 0.32155561447143555, 0.044574514031410217, 0.035713624209165573, -0.024515410885214806, 0.17956815659999847, 0.34401267766952515, -0.0612175352871418, -0.72465842962265015, 0.28038677573204041, -0.28542217612266541, 0.039614766836166382, 0.074134357273578644, 0.26413825154304504, -0.0084736784920096397, -0.072692371904850006, -0.11137309670448303, -0.0030407716985791922, 0.015266473405063152, 0.20828685164451599, 0.10889152437448502, 0.29771319031715393, -0.20744249224662781, -0.035900820046663284, 0.36932092905044556, -0.04725797101855278, 0.19972871243953705, -0.072871007025241852, 0.11139487475156784, 0.16953462362289429, -0.037362221628427505, 0.21858808398246765, 0.050503559410572052, 0.2581438422203064, -0.021843612194061279, 0.058792289346456528, 0.20329494774341583, 0.15657888352870941, 0.16770341992378235, -0.090958185493946075, 0.20091967284679413, -0.045035708695650101, 0.23458383977413177, 0.13611933588981628, 0.0052932696416974068, 0.064822293817996979, 0.042818445712327957, -0.17373129725456238, 0.11890453100204468, 0.10969677567481995, -0.027661517262458801, -0.068001933395862579, 0.15018877387046814, -0.15542389452457428, 0.28019291162490845, 0.021407639607787132, -0.01333105843514204, 0.016364343464374542, 0.0019777503330260515, 0.020509568974375725, 0.050391543656587601, 0.19597694277763367, -0.11053719371557236, 0.071460165083408356, 0.12020140886306763, 0.19639413058757782, 0.025119123980402946, 0.11165957897901535, -0.35168138146400452, 0.17267526686191559, -0.41509300470352173, -0.05583292618393898, -0.05441911518573761, 0.089500002562999725, 0.19163879752159119, -0.078966841101646423, 0.053114254027605057, -0.0027242004871368408, 0.010600745677947998, 0.10299520939588547, 0.29607266187667847, 0.23404540121555328, -0.098063714802265167, 0.26869741082191467, 0.20356646180152893, 
  -0.02637193351984024, 0.14357233047485352, -0.19533424079418182, -0.19024702906608582, -0.1943172812461853, 0.064931958913803101, 0.035805776715278625, 0.048195049166679382, 0.054059870541095734, 0.075585484504699707, -0.023214096203446388, 0.012896131724119186, -0.070868536829948425, 0.097989208996295929, -0.097894638776779175, 0.10221287608146667, 0.095825016498565674, 0.2178710550069809, 0.090921595692634583, 0.22146376967430115, 0.12491954863071442, 0.1633424311876297, 0.030269026756286621, 0.098862640559673309, -0.089832723140716553, -0.21984289586544037, -0.12667636573314667, 0.082970187067985535, 0.05940328910946846, -0.10191989690065384, 0.032389383763074875, -0.090406574308872223, -0.071691393852233887, 0.042122736573219299, -0.11314843595027924, 0.042733434587717056, -0.033058628439903259, -0.22533103823661804, 0.041408643126487732, 0.16761329770088196, 0.59983557462692261, -0.093451946973800659, -0.029907079413533211, -0.099711336195468903, 0.16378208994865417, -0.10525286197662354, -0.21314904093742371, -0.079727038741111755, -0.12318763136863708, 0.15909998118877411, 0.047885462641716003, 0.028558000922203064, 0.13040311634540558, 0.050678528845310211, 0.087473176419734955, -0.077272750437259674, 0.24408647418022156, 0.037892192602157593, -0.16528874635696411, 0.16860692203044891, 0.0085085369646549225, -0.13158687949180603, 0.068730957806110382, -0.13379541039466858, -0.02299252524971962, 0.10231287032365799, 0.24177834391593933, -0.12163908779621124, 0.14235405623912811, -0.013198553584516048, -0.07017795741558075, 0.18994681537151337, 0.083478733897209167, 0.16677244007587433, 0.12442217022180557, 0.14605157077312469, -0.05673854798078537, 0.061506301164627075, 0.15206320583820343, -0.1033896878361702, -0.12356378138065338, -0.11867182701826096, 0.028221188113093376, 0.2145485132932663, 0.25499621033668518, 0.20066423714160919, 0.094104818999767303, 0.16195270419120789, 0.168460413813591, 0.26514771580696106, 0.080352067947387695, 0.10756005346775055, -0.10616073757410049, 0.13470879197120667, 0.20024299621582031, 0.14851236343383789, -0.16278867423534393, 0.078035235404968262, 0.10337075591087341, -0.018210852518677711, 0.18771013617515564, 0.12628829479217529, 0.1206340566277504, -0.2064325213432312, 0.13758870959281921, -0.22280992567539215, 0.044717557728290558, 0.071168102324008942, 0.18184848129749298, -0.1297614723443985, 0.044931709766387939, -0.17110277712345123, -0.2130981981754303, 0.040594201534986496, 0.051156468689441681, -0.13845497369766235, -0.14835590124130249, 
  -0.038535460829734802, -0.30443242192268372, 0.025206008926033974, 0.049617946147918701, 0.16637472808361053, -0.079937905073165894, -0.11465292423963547, -0.1918710470199585, -0.04972492903470993, -0.26283857226371765, -0.28239250183105469, -0.1446063220500946, 0.016872653737664223, 0.15836714208126068, -0.32234904170036316, -0.010959393344819546, -0.046176992356777191, 0.04536774754524231, 0.10999284684658051, 0.045294594019651413, 0.015972120687365532, -0.14490963518619537, 0.059158273041248322, -0.1607566773891449, -0.061226990073919296, -0.1498396247625351, -0.14436215162277222, -0.044782895594835281, 0.029488217085599899, 0.2574475109577179, -0.04699089378118515, -0.10501231998205185, 0.071610279381275177, -0.34560614824295044, -0.21051669120788574, -0.24278827011585236, -0.1184554323554039, -0.30072075128555298, -0.2458820641040802, -0.036649957299232483, 0.32587498426437378, -0.040718205273151398, 0.15283876657485962, 0.32701456546783447, -0.0094795702025294304, -0.15507268905639648, 0.17851677536964417, -0.15743809938430786, 0.021311512216925621, -0.040867891162633896, 0.020276265218853951, -0.0093012284487485886, -0.041151683777570724, 0.031692750751972198, 0.0055806147865951061, -0.067641086876392365, -0.12909862399101257, 0.078813128173351288, 0.26278132200241089, -0.08163125067949295, -0.1244172602891922, 0.1937049925327301, -0.089298918843269348, 0.03807632252573967, -0.089476935565471649, 0.085451632738113403, 0.66167664527893066, -0.066902153193950653, 0.065746739506721497, 0.21056365966796875, -0.11785232275724411, 0.049228526651859283, -0.060537703335285187, 0.23223298788070679, 0.21555033326148987, 0.1885683685541153, -0.033283527940511703, 0.13342730700969696, -0.086470268666744232, 0.057670019567012787, -0.055037673562765121, 0.24795126914978027, -0.18054184317588806, 0.016161069273948669, -0.04329681396484375, 0.2585737407207489, -0.052564416080713272, 0.0043147532269358635, 0.06815599650144577, 0.11078611016273499, -0.035679712891578674, 0.18475747108459473, 0.096404209733009338, 0.12264683097600937, 0.10185609757900238, -0.055183913558721542, 0.10972379148006439, -0.075546644628047943, 0.28397843241691589, -0.14699093997478485, 0.081315614283084869, -0.094952493906021118, 0.08394082635641098, -0.056664794683456421, 0.050588358193635941, -0.13592886924743652, 0.090501852333545685, 0.22094503045082092, -0.097166344523429871, -0.2399577796459198, -0.048875194042921066, -0.042912241071462631, -0.040175445377826691, -0.31643486022949219, -0.44969573616981506, -0.10753436386585236, -0.20890413224697113, 
  0.050522670149803162, 0.28286454081535339, 0.24581994116306305, 0.181565061211586, 0.190191850066185, -0.0080986348912119865, -0.051394268870353699, 0.25733277201652527, 0.17981232702732086, 0.045898120850324631, -0.0088599929586052895, 0.38519680500030518, -0.059523586183786392, 0.046374805271625519, -0.11164373904466629, -0.019989321008324623, -0.16154210269451141, -0.021030759438872337, 0.10044952481985092, -0.37780311703681946, -0.37606066465377808, -0.19077959656715393, -0.47743967175483704, 0.040943697094917297, -0.12135227769613266, -0.017850147560238838, -0.052472807466983795, -0.10088939219713211, -0.12740576267242432, -0.095163069665431976, 0.006424988154321909, -0.12015244364738464, 0.055456873029470444, 0.10276849567890167, 0.13145558536052704, 0.21813157200813293, 0.25898262858390808, -0.06951574981212616, 0.16230808198451996, -0.19843499362468719, -0.21074993908405304, -0.082020804286003113, 0.35256931185722351, -0.12441041320562363, 0.053726058453321457, -0.1582726389169693, 0.068994916975498199, 0.25000971555709839, -0.14742283523082733, 0.11470833420753479, -0.028739996254444122, -0.13351592421531677, 0.2295709103345871, -0.25901174545288086, 0.11375652253627777, -0.16492529213428497, 0.097577281296253204, -0.10276642441749573, 0.0064281057566404343, -0.055512480437755585, 0.077012382447719574, -0.13891473412513733, 0.10078951716423035, 0.26457604765892029, 0.036780919879674911, 0.028834123164415359, -0.21109436452388763, 0.1355806291103363, -0.10262314975261688, -0.016770385205745697, 0.059952385723590851, -0.07222004234790802, 0.20251645147800446, 0.21031847596168518, 0.081375308334827423, 0.066026799380779266, -0.20068508386611938, -0.12604227662086487, 0.22654615342617035, 0.059564247727394104, -0.27439060807228088, -0.16056612133979797, -0.15766295790672302, 0.058593839406967163, 0.094249829649925232, 0.20353750884532928, -0.11353620886802673, 0.046462845057249069, 0.017384752631187439, 0.095339335501194, -0.02221234142780304, 0.25983041524887085, -0.10102207958698273, -0.18840259313583374, 0.19252356886863708, 0.15648345649242401, 0.071563549339771271, -0.14022235572338104, 0.10505872964859009, -0.10830094665288925, -0.0022984913084656, -0.052089791744947433, 0.030428854748606682, -0.0080884890630841255, -0.087790511548519135, -0.1420845240354538, -0.21877804398536682, 0.22467757761478424, 0.085074566304683685, -0.17280568182468414, -0.14067785441875458, -0.067672677338123322, 0.21640004217624664, 0.030087335035204887, -0.050834450870752335, 0.088990114629268646, 0.28719496726989746, 
  -0.20744015276432037, -0.056592356413602829, 0.076563037931919098, -0.23459208011627197, 0.076778382062911987, 0.048423271626234055, -0.10496074706315994, 0.011783584952354431, 0.025269150733947754, -0.041637439280748367, -0.16044925153255463, -0.04824313148856163, -0.14553935825824738, -0.17951066792011261, -0.15750156342983246, -0.13292975723743439, -0.020175866782665253, -0.1104913130402565, -0.083666585385799408, 0.11006078869104385, -0.073008716106414795, 0.203322634100914, -0.08259013295173645, 0.19439902901649475, -0.059524402022361755, -0.14977318048477173, -0.02764778770506382, -0.05427902564406395, -0.20846593379974365, -0.17260868847370148, 0.12280687689781189, -0.057650905102491379, -0.099683187901973724, -0.15496590733528137, 0.237336665391922, 0.19615094363689423, 0.090376555919647217, -0.10841012746095657, -0.12766332924365997, -0.096721917390823364, -0.18932141363620758, 0.074746854603290558, -0.15726637840270996, 0.11210283637046814, -0.010604304261505604, -0.055751055479049683, 0.18437075614929199, 0.023852389305830002, -0.1880781501531601, -0.20505106449127197, -0.00490967882797122, -0.19318269193172455, 0.060261771082878113, -0.11945300549268723, 0.099443770945072174, -0.17589305341243744, -0.10974610596895218, -0.16322977840900421, -0.087846249341964722, 0.11514110863208771, -0.096687398850917816, -0.13958078622817993, -0.16935399174690247, 0.12894390523433685, 0.072059236466884613, -0.13258229196071625, 0.16881191730499268, -0.18399110436439514, -0.016939787194132805, 0.18590453267097473, 0.097419098019599915, 0.081278480589389801, 0.12574008107185364, -0.12671202421188354, -0.22898395359516144, 0.033339608460664749, 0.15279270708560944, 0.0063370564021170139, -0.090028613805770874, 0.066671945154666901, 0.084143884479999542, 0.05402655154466629, 0.14728134870529175, 0.021920278668403625, 0.13217824697494507, 0.067341513931751251, 0.20781023800373077, 0.05175371840596199, 0.020111752673983574, -0.13498495519161224, -0.16792283952236176, 0.14462579786777496, 0.11289972066879272, -0.028769481927156448, -0.17645421624183655, -0.16918982565402985, 0.14480450749397278, 0.07781510055065155, 0.22930809855461121, -0.096290208399295807, -0.17625813186168671, 0.23601323366165161, 0.080929219722747803, 0.051417749375104904, -0.13299214839935303, 0.034047439694404602, -0.064574375748634338, -0.18045666813850403, -0.018811460584402084, 0.1505700945854187, -0.10149696469306946, 0.050694439560174942, -0.17736469209194183, -0.080199383199214935, -0.083970077335834503, -0.12133195996284485, 0.12543611228466034, 
  0.0045821103267371655, -0.0062327473424375057, 0.0070878593251109123, 0.050987463444471359, 0.056921936571598053, -0.39829444885253906, -0.28116777539253235, -0.3358674943447113, -0.10990850627422333, -0.13085088133811951, -0.39928275346755981, -0.12499608099460602, -0.087277412414550781, 0.12154588103294373, 0.17135210335254669, -0.073445849120616913, 0.18791298568248749, -0.056304015219211578, -0.23122851550579071, -0.058522243052721024, -0.18962252140045166, -0.32395070791244507, 0.020914329215884209, -0.26798945665359497, -0.12132537364959717, -0.15996541082859039, -0.086171187460422516, -0.061096187680959702, 0.14001400768756866, 0.30707040429115295, -0.19249141216278076, -0.13106833398342133, -0.030481398105621338, -0.29499664902687073, -0.1695026159286499, -0.090265519917011261, -0.45891448855400085, -0.15581344068050385, -0.20355188846588135, 0.022061550989747047, -0.80141359567642212, -0.035471923649311066, 0.21321295201778412, 0.12743483483791351, 0.055877465754747391, -0.065216794610023499, -0.10428742319345474, 0.15369409322738647, 0.042345967143774033, 0.077778726816177368, 0.10179707407951355, 0.15225556492805481, -0.10627208650112152, 0.60965627431869507, 0.11866981536149979, 0.069998838007450104, 0.152515709400177, -0.0033057339023798704, -0.018975788727402687, 0.24379277229309082, -0.054345149546861649, 0.2185543030500412, -0.10273484140634537, 0.14501436054706573, -0.037184093147516251, 0.16045203804969788, 0.19857217371463776, -0.23022007942199707, 0.18309907615184784, 0.26112216711044312, -0.058951076120138168, 0.2701420783996582, 0.13915802538394928, 0.12034530937671661, 0.078080765902996063, 0.22778140008449554, 0.026628656312823296, -0.10279341787099838, -0.16881166398525238, -0.085689082741737366, 0.17931988835334778, 0.15217280387878418, 0.14127837121486664, -0.26154002547264099, -0.1807592511177063, -0.056872595101594925, -0.095584064722061157, -0.16737344861030579, -0.12192091345787048, -0.15655063092708588, -0.54557919502258301, 0.1714431494474411, -0.013792973943054676, -0.033700112253427505, 0.24843819439411163, 0.010821707546710968, -0.17478525638580322, -0.19596657156944275, 0.17234976589679718, -0.20328551530838013, -0.10561613738536835, 0.10784381628036499, 0.099212430417537689, -0.24327357113361359, 0.011868673376739025, 0.1363804042339325, -0.17219547927379608, 0.027984950691461563, 0.1131991446018219, 0.077783547341823578, 0.1239435076713562, 0.048259947448968887, -0.32836794853210449, -0.25124111771583557, -0.032583415508270264, -0.09696178138256073, -0.19917900860309601, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,117 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data5[10*20] = { 
  0.21765518188476562, -0.34985703229904175, -0.49146932363510132, 0.012238780967891216, 0.40623965859413147, 0.038241460919380188, 0.51575553417205811, -0.38548570871353149, 0.0014989357441663742, -0.17213916778564453, 0.079180784523487091, -0.020013293251395226, 0.27605381608009338, 0.63887161016464233, 0.19539131224155426, -0.37910646200180054, 0.053641989827156067, -0.10161660611629486, -0.2414298951625824, 0.37313607335090637, 
  -0.58124434947967529, -0.61238646507263184, 0.25128135085105896, 0.25585681200027466, 0.12822358310222626, -0.30984032154083252, -0.13595002889633179, -0.3792702853679657, -0.40156850218772888, 0.063264757394790649, -0.21293602883815765, -0.3323395848274231, 0.23264651000499725, 0.0048352521844208241, 0.31641101837158203, 0.39749085903167725, -0.27179315686225891, 0.1398584246635437, -0.14383694529533386, -0.30653506517410278, 
  -0.10111432522535324, -0.37872633337974548, -0.019775349646806717, 0.3922717273235321, -0.20902435481548309, -0.24047766625881195, -0.1531459242105484, 0.076026909053325653, -0.16309206187725067, -0.048955459147691727, 0.11275896430015564, 0.18062488734722137, -0.091722331941127777, -0.34340304136276245, -0.059649676084518433, -0.27401387691497803, 0.30592617392539978, -0.38361391425132751, -0.38869312405586243, -0.31270945072174072, 
  -0.024933807551860809, -0.1049540638923645, 0.33255493640899658, -0.052020702511072159, -0.40418305993080139, 0.24309879541397095, -0.21542957425117493, -0.18088039755821228, -0.12979280948638916, 0.26797345280647278, 0.31153413653373718, 0.16825063526630402, -0.34081032872200012, -0.41237848997116089, -0.017603220418095589, -0.24059112370014191, -0.12805670499801636, -0.27365732192993164, 0.38332071900367737, 0.48233109712600708, 
  0.28796374797821045, 0.14720579981803894, -0.63051885366439819, -0.24084679782390594, -0.41581255197525024, 0.3843630850315094, -0.065511994063854218, 0.094976529479026794, -0.30338117480278015, 0.21613861620426178, 0.51160687208175659, 0.29437899589538574, -0.13037893176078796, 0.20129911601543427, 0.10926206409931183, -0.2627359926700592, -0.37205678224563599, 0.43132570385932922, 0.24219968914985657, 0.17056699097156525, 
  -0.69407010078430176, 0.42441922426223755, -0.49093919992446899, 0.15230059623718262, -0.46427357196807861, -0.81161415576934814, -0.096770122647285461, 0.20070686936378479, -0.544952392578125, -0.28252235054969788, 0.19765612483024597, 0.036848299205303192, -0.31453019380569458, 0.47800526022911072, 0.087496437132358551, -0.1364925354719162, 0.13789661228656769, 0.36770990490913391, -0.50095570087432861, 0.44995203614234924, 
  0.82722508907318115, 0.30238854885101318, 0.05422050878405571, -0.32126018404960632, 0.38317710161209106, 0.43390640616416931, 0.016812764108181, -0.11376431584358215, -0.034145362675189972, 0.036070223897695541, 0.26325303316116333, 0.37440308928489685, -0.21897922456264496, -0.24678122997283936, -0.035984888672828674, -0.11010497808456421, 0.35274842381477356, -0.038463588804006577, -0.015347372740507126, 0.080261781811714172, 
  -0.033993653953075409, 0.41177859902381897, 0.40613114833831787, 0.23451793193817139, -0.022675443440675735, 0.32197493314743042, 0.28473183512687683, -0.41365990042686462, 0.41805359721183777, -0.090973004698753357, -0.24400588870048523, 0.44601604342460632, 0.29859423637390137, -0.20253020524978638, -0.42205971479415894, 0.18660220503807068, 0.42181524634361267, -0.0026127712335437536, 0.082226820290088654, 0.35633498430252075, 
  0.55148261785507202, 0.34591484069824219, 0.16675521433353424, 0.1624305248260498, 0.39036267995834351, 0.14605584740638733, -0.46362712979316711, -0.099663406610488892, -0.1164204478263855, 0.031506162136793137, 0.35206463932991028, 0.11325211077928543, -0.017410483211278915, -0.31456524133682251, -0.19619362056255341, 0.33182188868522644, -0.34996777772903442, 0.29488188028335571, -0.21682295203208923, -0.39350640773773193, 
  0.59334713220596313, -0.13107752799987793, 0.068459168076515198, -0.038381043821573257, 0.39485821127891541, 0.42009401321411133, -0.20175729691982269, 0.051759637892246246, 0.33731842041015625, -0.33080241084098816, -0.26445147395133972, 0.25741562247276306, -0.22692863643169403, -0.24121870100498199, 0.13301409780979156, -0.15036202967166901, 0.069004900753498077, 0.34286418557167053, 0.050105392932891846, 0.5560569167137146, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data6[7*10] = { 
  0.43858540058135986, -0.19091884791851044, -0.48653137683868408, -0.50583970546722412, -0.4036957323551178, -0.83976185321807861, 0.23202624917030334, 0.35548359155654907, -0.18663918972015381, 0.87994766235351562, 
  0.21814966201782227, 0.7435992956161499, 0.2465970367193222, -0.52638983726501465, 0.034059315919876099, 0.17439334094524384, -0.4829067587852478, 0.031423714011907578, 0.14898303151130676, -0.20821551978588104, 
  -0.79552251100540161, -0.46069374680519104, 0.040187075734138489, -0.27936926484107971, 0.51574426889419556, -0.038016095757484436, 0.36146607995033264, -0.61713778972625732, 0.40996921062469482, 0.48086884617805481, 
  -0.079197682440280914, -0.46942749619483948, -0.46153196692466736, -0.61495119333267212, -0.14640115201473236, -0.8578798770904541, 0.099424704909324646, 0.49669265747070312, 0.51406383514404297, 0.41381204128265381, 
  0.39495855569839478, -0.040940310806035995, 0.40016046166419983, 0.16761752963066101, 0.6147802472114563, -0.97510504722595215, 0.32056924700737, -0.039367340505123138, -0.53360217809677124, -0.033186610788106918, 
  -0.34011328220367432, -0.28689157962799072, 0.15832673013210297, 0.38252207636833191, -0.32176446914672852, 0.40534937381744385, 0.18856412172317505, 0.23441663384437561, 0.018836235627532005, 0.33267456293106079, 
  0.6830865740776062, -0.70704388618469238, -0.48935586214065552, 0.32920631766319275, 0.24859283864498138, 0.43571734428405762, -0.42650365829467773, -0.44389590620994568, 0.19717076420783997, 0.041820257902145386, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 7,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,7 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,7 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,1 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 468, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 40, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 80, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 28, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 9360, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 800, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 280, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 480), (TfLiteIntArray*)&g0::tensor_dimension7, 80, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 40, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 48), (TfLiteIntArray*)&g0::tensor_dimension9, 28, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 28, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = kTfLiteFloat32;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = kTfLiteFloat32;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_10_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
